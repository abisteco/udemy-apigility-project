<?php

namespace DoctrineORMModule\Proxy\__CG__\ZF\OAuth2\Doctrine\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Client extends \ZF\OAuth2\Doctrine\Entity\Client implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'ZF\\OAuth2\\Doctrine\\Entity\\Client' . "\0" . 'clientId', '' . "\0" . 'ZF\\OAuth2\\Doctrine\\Entity\\Client' . "\0" . 'secret', '' . "\0" . 'ZF\\OAuth2\\Doctrine\\Entity\\Client' . "\0" . 'redirectUri', '' . "\0" . 'ZF\\OAuth2\\Doctrine\\Entity\\Client' . "\0" . 'grantType', '' . "\0" . 'ZF\\OAuth2\\Doctrine\\Entity\\Client' . "\0" . 'clientScope', '' . "\0" . 'ZF\\OAuth2\\Doctrine\\Entity\\Client' . "\0" . 'id', '' . "\0" . 'ZF\\OAuth2\\Doctrine\\Entity\\Client' . "\0" . 'accessToken', '' . "\0" . 'ZF\\OAuth2\\Doctrine\\Entity\\Client' . "\0" . 'refreshToken', '' . "\0" . 'ZF\\OAuth2\\Doctrine\\Entity\\Client' . "\0" . 'authorizationCode', '' . "\0" . 'ZF\\OAuth2\\Doctrine\\Entity\\Client' . "\0" . 'jwt', '' . "\0" . 'ZF\\OAuth2\\Doctrine\\Entity\\Client' . "\0" . 'jti', '' . "\0" . 'ZF\\OAuth2\\Doctrine\\Entity\\Client' . "\0" . 'publicKey', '' . "\0" . 'ZF\\OAuth2\\Doctrine\\Entity\\Client' . "\0" . 'scope', '' . "\0" . 'ZF\\OAuth2\\Doctrine\\Entity\\Client' . "\0" . 'user');
        }

        return array('__isInitialized__', '' . "\0" . 'ZF\\OAuth2\\Doctrine\\Entity\\Client' . "\0" . 'clientId', '' . "\0" . 'ZF\\OAuth2\\Doctrine\\Entity\\Client' . "\0" . 'secret', '' . "\0" . 'ZF\\OAuth2\\Doctrine\\Entity\\Client' . "\0" . 'redirectUri', '' . "\0" . 'ZF\\OAuth2\\Doctrine\\Entity\\Client' . "\0" . 'grantType', '' . "\0" . 'ZF\\OAuth2\\Doctrine\\Entity\\Client' . "\0" . 'clientScope', '' . "\0" . 'ZF\\OAuth2\\Doctrine\\Entity\\Client' . "\0" . 'id', '' . "\0" . 'ZF\\OAuth2\\Doctrine\\Entity\\Client' . "\0" . 'accessToken', '' . "\0" . 'ZF\\OAuth2\\Doctrine\\Entity\\Client' . "\0" . 'refreshToken', '' . "\0" . 'ZF\\OAuth2\\Doctrine\\Entity\\Client' . "\0" . 'authorizationCode', '' . "\0" . 'ZF\\OAuth2\\Doctrine\\Entity\\Client' . "\0" . 'jwt', '' . "\0" . 'ZF\\OAuth2\\Doctrine\\Entity\\Client' . "\0" . 'jti', '' . "\0" . 'ZF\\OAuth2\\Doctrine\\Entity\\Client' . "\0" . 'publicKey', '' . "\0" . 'ZF\\OAuth2\\Doctrine\\Entity\\Client' . "\0" . 'scope', '' . "\0" . 'ZF\\OAuth2\\Doctrine\\Entity\\Client' . "\0" . 'user');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Client $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getArrayCopy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getArrayCopy', array());

        return parent::getArrayCopy();
    }

    /**
     * {@inheritDoc}
     */
    public function exchangeArray(array $array)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'exchangeArray', array($array));

        return parent::exchangeArray($array);
    }

    /**
     * {@inheritDoc}
     */
    public function setClientId($clientId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setClientId', array($clientId));

        return parent::setClientId($clientId);
    }

    /**
     * {@inheritDoc}
     */
    public function getClientId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClientId', array());

        return parent::getClientId();
    }

    /**
     * {@inheritDoc}
     */
    public function setSecret($secret)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSecret', array($secret));

        return parent::setSecret($secret);
    }

    /**
     * {@inheritDoc}
     */
    public function getSecret()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSecret', array());

        return parent::getSecret();
    }

    /**
     * {@inheritDoc}
     */
    public function setRedirectUri($redirectUri)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRedirectUri', array($redirectUri));

        return parent::setRedirectUri($redirectUri);
    }

    /**
     * {@inheritDoc}
     */
    public function getRedirectUri()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRedirectUri', array());

        return parent::getRedirectUri();
    }

    /**
     * {@inheritDoc}
     */
    public function setGrantType($grantType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGrantType', array($grantType));

        return parent::setGrantType($grantType);
    }

    /**
     * {@inheritDoc}
     */
    public function getGrantType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGrantType', array());

        return parent::getGrantType();
    }

    /**
     * {@inheritDoc}
     */
    public function setClientScope($clientScope)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setClientScope', array($clientScope));

        return parent::setClientScope($clientScope);
    }

    /**
     * {@inheritDoc}
     */
    public function getClientScope()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClientScope', array());

        return parent::getClientScope();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function addAccessToken(\ZF\OAuth2\Doctrine\Entity\AccessToken $accessToken)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAccessToken', array($accessToken));

        return parent::addAccessToken($accessToken);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAccessToken(\ZF\OAuth2\Doctrine\Entity\AccessToken $accessToken)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAccessToken', array($accessToken));

        return parent::removeAccessToken($accessToken);
    }

    /**
     * {@inheritDoc}
     */
    public function getAccessToken()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAccessToken', array());

        return parent::getAccessToken();
    }

    /**
     * {@inheritDoc}
     */
    public function addRefreshToken(\ZF\OAuth2\Doctrine\Entity\RefreshToken $refreshToken)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRefreshToken', array($refreshToken));

        return parent::addRefreshToken($refreshToken);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRefreshToken(\ZF\OAuth2\Doctrine\Entity\RefreshToken $refreshToken)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRefreshToken', array($refreshToken));

        return parent::removeRefreshToken($refreshToken);
    }

    /**
     * {@inheritDoc}
     */
    public function getRefreshToken()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRefreshToken', array());

        return parent::getRefreshToken();
    }

    /**
     * {@inheritDoc}
     */
    public function addAuthorizationCode(\ZF\OAuth2\Doctrine\Entity\AuthorizationCode $authorizationCode)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAuthorizationCode', array($authorizationCode));

        return parent::addAuthorizationCode($authorizationCode);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAuthorizationCode(\ZF\OAuth2\Doctrine\Entity\AuthorizationCode $authorizationCode)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAuthorizationCode', array($authorizationCode));

        return parent::removeAuthorizationCode($authorizationCode);
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthorizationCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthorizationCode', array());

        return parent::getAuthorizationCode();
    }

    /**
     * {@inheritDoc}
     */
    public function addJwt(\ZF\OAuth2\Doctrine\Entity\Jwt $jwt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addJwt', array($jwt));

        return parent::addJwt($jwt);
    }

    /**
     * {@inheritDoc}
     */
    public function removeJwt(\ZF\OAuth2\Doctrine\Entity\Jwt $jwt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeJwt', array($jwt));

        return parent::removeJwt($jwt);
    }

    /**
     * {@inheritDoc}
     */
    public function getJwt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getJwt', array());

        return parent::getJwt();
    }

    /**
     * {@inheritDoc}
     */
    public function addJti(\ZF\OAuth2\Doctrine\Entity\Jti $jti)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addJti', array($jti));

        return parent::addJti($jti);
    }

    /**
     * {@inheritDoc}
     */
    public function removeJti(\ZF\OAuth2\Doctrine\Entity\Jti $jti)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeJti', array($jti));

        return parent::removeJti($jti);
    }

    /**
     * {@inheritDoc}
     */
    public function getJti()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getJti', array());

        return parent::getJti();
    }

    /**
     * {@inheritDoc}
     */
    public function getPublicKey()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPublicKey', array());

        return parent::getPublicKey();
    }

    /**
     * {@inheritDoc}
     */
    public function setPublicKey(\ZF\OAuth2\Doctrine\Entity\PublicKey $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPublicKey', array($value));

        return parent::setPublicKey($value);
    }

    /**
     * {@inheritDoc}
     */
    public function addScope(\ZF\OAuth2\Doctrine\Entity\Scope $scope)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addScope', array($scope));

        return parent::addScope($scope);
    }

    /**
     * {@inheritDoc}
     */
    public function removeScope(\ZF\OAuth2\Doctrine\Entity\Scope $scope)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeScope', array($scope));

        return parent::removeScope($scope);
    }

    /**
     * {@inheritDoc}
     */
    public function getScope()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getScope', array());

        return parent::getScope();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser(\ZF\OAuth2\Doctrine\Entity\UserInterface $user = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', array($user));

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', array());

        return parent::getUser();
    }

}
